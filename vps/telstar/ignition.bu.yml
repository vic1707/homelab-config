###### Debug SELinux
# sudo ausearch -m avc -ts recent
### Print allow policy
# sudo ausearch -m avc -ts recent | grep <thing> | audit2allow -m TMP

## {{ $LLDAP_BASE_DN := printf "dc=%s" (conv.Join (.DOMAIN.URL | strings.Split `.`) `,dc=`) }}
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/Relativ-IT/Butane-Schemas/Release/Butane-Schema.json
variant: fcos
version: 1.6.0

storage:
  links:
    # Timezone config
    - path: /etc/localtime
      target: ../usr/share/zoneinfo/Europe/Paris

  # Base container storage path
  directories:
    - path: /etc/selinux/custom-policies
    - path: /srv/bofzilla
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /srv/bofzilla/containers
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /srv/bofzilla/containers/caddy
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /srv/bofzilla/containers/crowdsec
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /srv/bofzilla/containers/lldap
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /srv/bofzilla/containers/authelia
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/caddy
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/lldap
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/crowdsec
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/authelia
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    # Path for bofzilla's systemd units
    - path: /home/bofzilla/.config
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/systemd
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/systemd/user
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    # Path to manually enable bofzilla's systemd units - these are links back to the unit file
    - path: /home/bofzilla/.config/systemd/user/default.target.wants
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    # Path for bofzilla's podman quadlets
    - path: /home/bofzilla/.config/containers/systemd
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla
    # Path for bofzilla's custom containerfiles
    - path: /home/bofzilla/.config/containers/containerfiles
      mode: 0755
      user:
        name: bofzilla
      group:
        name: bofzilla

  files:
    #### Backup
    ## {{ if .BACKUP.ENABLED }}
    - path: /etc/sync/paths.txt
      mode: 0400
      contents:
        inline: |
          /var/srv/bofzilla/
    - path: /etc/sync/restore.sh
      mode: 0500
      contents:
        local: ./restore.sh
    - path: /etc/selinux/custom-policies/rsync-cifs.te
      mode: 0400
      contents:
        inline: |
          module rsync_cifs 1.0;

          require {
            type rsync_t;
            class capability dac_override;
          }

          #============= rsync_t ==============
          allow rsync_t self:capability dac_override;
    - path: /etc/cifs-credentials
      mode: 0400
      contents:
        inline: |
          username={{ .BACKUP.STORAGEBOX_USER }}
          password={{ .BACKUP.STORAGEBOX_PASS }}
    ## {{ end }} ## .BACKUP.ENABLED
    - path: /etc/selinux/custom-policies/podman-mount-journald.te
      mode: 0400
      contents:
        inline: |
          module podman_mount_journald 1.0;

          require {
            type var_log_t;
            type container_t;
            class dir { read watch };
            class file { read open getattr map };
          }

          #============= pasta_t ==============
          allow container_t var_log_t:dir { read watch };
          allow container_t var_log_t:file { read open getattr map };

    # enable lingering
    - path: /var/lib/systemd/linger/bofzilla

    # Install semanage
    - path: /var/lib/extensions/semanage.raw
      contents:
        source: https://github.com/travier/fedora-sysexts/releases/download/semanage-3.8-1.fc42-42-arm64/semanage-3.8-1.fc42-42-arm64.raw
        verification:
          hash: sha256-708b3bdf8068f16002104e066f0e266747cdb83f8e95135ce6a50669e8e1ad47
    # Additional crowdsec bouncer
    - path: /var/opt/crowdsec-firewall-bouncer.tgz
      mode: 0400
      contents:
        source: https://github.com/crowdsecurity/cs-firewall-bouncer/releases/download/v0.0.34/crowdsec-firewall-bouncer-linux-arm64.tgz
        verification:
          hash: sha256-41899de18ad928e89de26a6fcd46ae8c7cb9a3b95369e850335106db0bf727aa
    - path: /var/opt/crowdsec-firewall-bouncer.yaml
      mode: 0400
      contents:
        inline: |
          # TODO: prometheus is supported
          mode: nftables
          update_frequency: 10s

          api_url: http://127.0.0.1:8080/
          api_key: {{ .CROWDSEC.FIREWALL_BOUNCER_API_KEY }}

          ## Log
          log_mode: file
          log_dir: /var/log/
          log_level: debug
          log_compression: true
          log_max_size: 100
          log_max_backups: 3
          log_max_age: 30
          deny_log_prefix: "crowdsec: "
          deny_log: true

          ## nftables
          nftables:
            ipv4:
              enabled: true
              set-only: false
              table: crowdsec
              chain: crowdsec-chain
            ipv6:
              enabled: true
              set-only: false
              table: crowdsec6
              chain: crowdsec6-chain

    # SSH daemon hardening
    - path: /etc/ssh/sshd_config.d/35-hardening.conf
      mode: 0400
      contents:
        inline: |
          Port {{ .SSH_PORT }}
          PermitRootLogin no              # Disallow root SSH logins
          PasswordAuthentication no       # Force key-based auth
          AddressFamily inet              # Binds SSH to IPv4 only
          MaxAuthTries 6                  # Includes ssh-key tries
          MaxSessions 2                   # Max connections per IP
          MaxStartups 2                   # Maximum incoming connection attempts
          LogLevel VERBOSE

          HostKey /etc/ssh/ssh_host_ed25519_key
          HostKey /etc/ssh/ssh_host_rsa_key
          KexAlgorithms mlkem768x25519-sha256,sntrup761x25519-sha512@openssh.com
          HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256
          Ciphers aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
          MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com
          CASignatureAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256
          HostbasedAcceptedAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256
          PubkeyAcceptedAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256
          RekeyLimit 512M 1h
          GSSAPIAuthentication no
          GSSAPIKeyExchange no
          RequiredRSASize 3072
          KbdInteractiveAuthentication no
          Compression no

    # Require password for sudo (wheel and sudo groups)
    - path: /etc/sudoers.d/99-wheel-sudo-require-password
      mode: 0400
      contents:
        inline: |
          %wheel ALL=(ALL) ALL
          %sudo ALL=(ALL) ALL

    # Disable unnecessary DNS listeners (like LLMNR, mDNS, and stub listener)
    - path: /etc/systemd/resolved.conf.d/99-custom-dns-disable-llmnr-mdns-stublistener.conf
      mode: 0444 # Cannot change
      contents:
        inline: |
          [Resolve]
          # Cloudflare
          DNS=1.1.1.1 1.0.0.1
          # Quad9 & Google DNS
          FallbackDNS=9.9.9.9 8.8.8.8
          # Disables Link-Local Multicast Name Resolution
          LLMNR=no
          # Disables mDNS
          MulticastDNS=no
          # Prevents systemd-resolved from opening port 53 on localhost
          DNSStubListener=no

    # Close all ports (firewall rules)
    - path: /etc/sysconfig/nftables.conf
      overwrite: true
      mode: 0400
      contents:
        inline: |
          table inet filter {
            chain input {
              ## hook into the kernel's INPUT path to filter packets
              type filter hook input priority 0;

              ## DROP everything by default
              policy drop;

              # reject invalid/trash traffic
              ct state { invalid } drop
              tcp flags & (fin|syn|rst|ack) != syn ct state { new } drop

              ## Allow loopback (localhost) traffic
              # @typos-ignore
              iif lo accept;

              # Allow ICMP (IPv4 + IPv6)
              # TODO: less allowed types?
              ip protocol icmp accept
              ip6 nexthdr icmpv6 accept


              ## Allow established or related connections
              ct state { established, related } accept;

              # SSH + rate limit up to 3 new SSH connections per minute
              tcp dport {{ .SSH_PORT }} tcp flags syn ct state new limit rate 3/minute accept

              tcp dport { https } accept;

              ## Log drop packets
              # ip protocol { tcp } counter log prefix "tcp.in.dropped: ";
              # ip protocol { udp } counter log prefix "udp.in.dropped: ";
            }

            chain forward {
              ## hook into the kernel's FORWARD path to filter packets
              type filter hook forward priority 0;

              ## DROP everything by default
              policy drop;

              # Log drop packets
              # ip protocol { tcp } counter log prefix "tcp.fwd.dropped: ";
              # ip protocol { udp } counter log prefix "udp.fwd.dropped: ";
            }

            chain output {
              ## hook into the kernel's OUTPUT path to filter packets
              type filter hook output priority 0;

              ## DROP everything by default
              policy drop;

              ct state { related, established } accept;

              tcp dport { http, https } accept;
              ## DNS requests
              udp dport { domain } accept;
              tcp dport { domain } accept;
              ## timesyncd
              udp dport { ntp } accept;

              # Log drop packets
              # ip protocol { tcp } counter log prefix "tcp.out.dropped: ";
              # ip protocol { udp } counter log prefix "udp.out.dropped: ";
            }
          }

    # Audit rules
    - path: /etc/audit/rules.d/99-custom.rules
      mode: 0400
      contents:
        inline: |
          # Watch /etc/passwd for write (w) and attribute (a) changes.
          -w /etc/passwd -p wa -k passwd_changes

          # Watch /etc/shadow for write (w) and attribute (a) changes.
          -w /etc/shadow -p wa -k shadow_changes

          # Watch SSH daemon config for changes.
          -w /etc/ssh/sshd_config -p wa -k ssh_config_changes

    # Sysctl hardening
    - path: /etc/sysctl.d/99-hardening.conf
      mode: 0400
      contents:
        inline: |
          # Enable reverse path filtering (prevents IP spoofing).
          net.ipv4.conf.all.rp_filter = 1

          # Restrict access to kernel pointers in /proc (helps mitigate kernel info leaks).
          kernel.kptr_restrict = 2

    # Allow the unprivileged user to bind to port 443 and above
    - path: /etc/sysctl.d/90-unprivileged-ports.conf
      contents:
        inline: |
          net.ipv4.ip_unprivileged_port_start = 443

    ######################
    ## Containers stuff ##
    ######################
    - path: /home/bofzilla/.config/containers/systemd/tunnel.network
      mode: 0400
      contents:
        inline: |
          [Network]
          NetworkName=tunnel
          Driver=bridge
          IPv6=true
          Subnet={{ .PODMAN_TUNNEL_SUBNET }}
          Options=isolate=true
      user:
        name: bofzilla
      group:
        name: bofzilla

    ## Caddy
    - path: /home/bofzilla/.config/containers/caddy/Caddyfile
      mode: 0400
      contents:
        inline: |
          {
            debug
            # metrics { per_host }
            # admin :2019

            servers {
              # https://github.com/fvbommel/caddy-combine-ip-ranges
              trusted_proxies combine {
                # https://github.com/WeidiDeng/caddy-cloudflare-ip
                cloudflare {
                  interval 12h # How often cloudflare ip lists are retrieved
                  timeout 15s # Maximum time to wait to get a response from cloudflare
                }
                # podman network's IP range
                static {{ .PODMAN_TUNNEL_SUBNET }}
              }

              # https://github.com/hslatman/caddy-crowdsec-bouncer/issues/33#issuecomment-2241205984
              client_ip_headers Cf-Connecting-Ip X-Forwarded-For
            }

            {{ if .DOMAIN.SSL }}
            # https://github.com/mholt/caddy-dynamicdns
            dynamic_dns {
              provider cloudflare {env.CLOUDFLARE_API_TOKEN}
              domains {
                {{ .DOMAIN.URL }}
              }
              versions ipv4
            }
            {{ end }}

            # https://github.com/hslatman/caddy-crowdsec-bouncer
            order crowdsec first
            order appsec first
            crowdsec {
              api_url http://crowdsec:8080
              appsec_url http://crowdsec:7422
              api_key {env.CROWDSEC_CADDY_BOUNCER_API_KEY}
              enable_hard_fails
            }
          }

          (https) {
            # https://github.com/caddy-dns/cloudflare
            tls {
              dns cloudflare {env.CLOUDFLARE_API_TOKEN}
            }
          }

          (access_log) {
            log {
              output file /var/log/caddy/access.log
              level DEBUG
            }
          }

          # https://www.authelia.com/integration/proxies/caddy/
          # https://caddyserver.com/docs/caddyfile/directives/forward_auth#authelia
          # https://caddy.community/t/securing-web-apps-with-caddy-and-authelia-in-docker-compose-an-opinionated-practical-and-minimal-production-ready-login-portal-guide/20465
          ## Only works for subdomains, subpaths: https://www.authelia.com/integration/proxies/caddy/#subpath
          (secure) {
            forward_auth {args[0]} authelia:9091 {
              uri /api/authz/forward-auth
              copy_headers Remote-User Remote-Groups Remote-Name Remote-Email
              # header_up Host {host}:{port}
            }
          }

          https://www.{{ .DOMAIN.URL }}, https://{{ .DOMAIN.URL }} {
            import access_log
            {{ if .DOMAIN.SSL }} import https {{ end }}
            crowdsec
            appsec
            redir https://github.com/vic1707
          }

          https://{{ .LLDAP.SUBDOMAIN }}.{{ .DOMAIN.URL }} {
            import access_log
            import secure *
            {{ if .DOMAIN.SSL }} import https {{ end }}
            crowdsec
            appsec
            reverse_proxy http://lldap:17170
          }

          https://{{ .AUTHELIA.SUBDOMAIN }}.{{ .DOMAIN.URL }} {
            import access_log
            {{ if .DOMAIN.SSL }} import https {{ end }}
            crowdsec
            appsec
            reverse_proxy authelia:9091
          }

          :9999 {
            handle /health {
              respond "OK"
            }
          }

      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/systemd/caddy.container
      mode: 0400
      contents:
        inline: |
          [Unit]
          Description=Caddy Quadlet
          After=crowdsec.container

          [Container]
          AutoUpdate=registry
          Image=ghcr.io/vic1707/homelab/telstar-caddy:latest
          ContainerName=caddy
          Network=tunnel.network
          ReadOnly=true
          DropCapability=ALL
          # exec container process `/usr/bin/caddy`: Operation not permitted
          AddCapability=NET_BIND_SERVICE
          NoNewPrivileges=true
          Environment="TZ=Europe/Paris"
          {{ if .DOMAIN.SSL }} Environment="CLOUDFLARE_API_TOKEN={{ .DOMAIN.CLOUDFLARE_API_TOKEN }}" {{ end }}
          Environment="CROWDSEC_CADDY_BOUNCER_API_KEY={{ .CROWDSEC.CADDY_BOUNCER_API_KEY }}"
          PublishPort=443:443
          Volume=/home/bofzilla/.config/containers/caddy/Caddyfile:/etc/caddy/Caddyfile:Z,ro
          Volume=/srv/bofzilla/containers/caddy:/data/caddy:Z,rw
          Mount=type=volume,source=CrowdsecLogs.volume,subpath=/caddy,destination=/var/log/caddy

          Notify=healthy
          HealthCmd=wget --spider --quiet --tries=1 --timeout=5 http://localhost:9999/health
          HealthInterval=30s
          HealthTimeout=5s
          HealthRetries=5
          HealthStartPeriod=30s

          [Service]
          Restart=on-failure
          # Podman handles it via Healthcheck and Notify=healthy
          TimeoutStartSec=infinity
          ExecStartPre=/bin/bash -c "until [ -f /run/restore-complete ]; do sleep 1; done"

          [Install]
          WantedBy=default.target
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/systemd/crowdsec.container
      mode: 0400
      contents:
        inline: |
          [Unit]
          Description=Crowdsec Quadlet

          [Container]
          AutoUpdate=registry
          Image=docker.io/crowdsecurity/crowdsec:v1.6.11-debian
          ContainerName=crowdsec
          Network=tunnel.network
          NoNewPrivileges=true
          DropCapability=ALL
          Tmpfs=/var/lib/crowdsec/data
          PublishPort=127.0.0.1:8080:8080
          Environment="TZ=Europe/Paris"
          Environment="BOUNCER_KEY_caddy={{ .CROWDSEC.CADDY_BOUNCER_API_KEY }}"
          Environment="BOUNCER_KEY_firewall={{ .CROWDSEC.FIREWALL_BOUNCER_API_KEY }}"
          Environment="ENROLL_KEY={{ .CROWDSEC.ENROLL_KEY }}"
          Environment="USE_WAL=true"
          Environment="ENROLL_INSTANCE_NAME=telstar"
          Environment="COLLECTIONS=crowdsecurity/linux crowdsecurity/sshd crowdsecurity/caddy crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules LePresidente/authelia"
          Volume=/srv/bofzilla/containers/crowdsec:/etc/crowdsec:Z,rw
          Volume=/home/bofzilla/.config/containers/crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml:Z,rw
          Volume=CrowdsecLogs.volume:/var/log:ro
          Volume=/var/log/journal:/run/log/journal:ro

          Notify=healthy
          HealthCmd=cscli lapi status
          HealthInterval=30s
          HealthTimeout=5s
          HealthRetries=5
          HealthStartPeriod=180s

          [Service]
          Restart=on-failure
          # Podman handles it via Healthcheck and Notify=healthy
          TimeoutStartSec=infinity
          ExecStartPre=/bin/bash -c "until [ -f /run/restore-complete ]; do sleep 1; done"
          # needed by the bounder
          ExecStartPost=/usr/bin/touch /run/user/%U/crowdsec-ready

          [Install]
          WantedBy=default.target
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/systemd/CrowdsecLogs.volume
      mode: 0400
      contents:
        inline: |
          [Volume]
          VolumeName=CrowdsecLogs

          [Service]
          ExecStart=/usr/bin/podman run --rm -v CrowdsecLogs:/mnt docker.io/library/alpine mkdir -p /mnt/caddy /mnt/authelia
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/crowdsec/acquis.yaml
      mode: 0400
      contents:
        local: ./acquis.yaml
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/systemd/lldap.container
      mode: 0400
      contents:
        inline: |
          [Unit]
          Description=LLDAP Server

          [Container]
          AutoUpdate=registry
          Image=ghcr.io/lldap/lldap:latest-alpine-rootless
          User=%U
          Group=%G
          UserNS=keep-id:uid=%U,gid=%G
          ContainerName=lldap
          Network=tunnel.network
          ReadOnly=true
          DropCapability=ALL
          NoNewPrivileges=true

          Environment="TZ=Europe/Paris"

          Volume=/srv/bofzilla/containers/lldap:/db:Z,rw
          Volume=/home/bofzilla/.config/containers/lldap/config.toml:/data/lldap_config.toml:Z,ro

          Notify=healthy
          HealthCmd=/app/lldap healthcheck --config-file /data/lldap_config.toml

          [Service]
          Restart=on-failure
          # Podman handles it via Healthcheck and Notify=healthy
          TimeoutStartSec=infinity
          ExecStartPre=/bin/bash -c "until [ -f /run/restore-complete ]; do sleep 1; done"

          [Install]
          WantedBy=default.target
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/lldap/config.toml
      mode: 0400
      contents:
        inline: |
          ## TODO: SMTP here or done through Authelia?
          ## General settings
          # verbose = true
          http_host = '0.0.0.0'
          http_url = 'https://{{ .LLDAP.SUBDOMAIN }}.{{ .DOMAIN.URL }}'
          database_url = 'sqlite:///db/users.db?mode=rwc'
          ldap_base_dn = '{{ $LLDAP_BASE_DN }}'

          ## Admin account
          ldap_user_dn = '{{ .LLDAP.ADMIN_USER }}'
          ldap_user_pass = '''{{ .LLDAP.ADMIN_PASS }}'''
          ldap_user_email = '{{ .LLDAP.ADMIN_USER }}@{{ .DOMAIN.URL }}'

          ## Seeding
          jwt_secret = '''{{ .LLDAP.JWT_SECRET }}'''  ## Can be random everytime
          key_seed = '''{{ .LLDAP.KEY_SEED }}'''      ## Must stay
          key_file = ''                               ## Avoids a warning log
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/systemd/lldap-bootstrap.container
      mode: 0400
      contents:
        inline: |
          [Unit]
          Description=LLDAP Bootstrap
          After=lldap.container

          [Container]
          Image=ghcr.io/lldap/lldap:latest-alpine-rootless
          User=%U
          Group=%G
          UserNS=keep-id:uid=%U,gid=%G
          Network=tunnel.network
          ReadOnly=true
          DropCapability=ALL
          NoNewPrivileges=true

          Environment="TZ=Europe/Paris"
          Environment="LLDAP_URL=http://lldap:17170"
          Environment="LLDAP_ADMIN_PASSWORD={{ .LLDAP.ADMIN_PASS }}"

          Volume=/home/bofzilla/.config/containers/lldap/authelia-user.json:/bootstrap/user-configs/authelia-user.json:Z,ro
          Volume=/home/bofzilla/.config/containers/lldap/service-accounts-group.json:/bootstrap/group-configs/service-accounts-group.json:Z,ro

          Entrypoint=/app/bootstrap.sh

          [Service]
          Type=oneshot
          ## Needed in order to wait for its end
          RemainAfterExit=true

          [Install]
          WantedBy=default.target
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/lldap/service-accounts-group.json
      mode: 0400
      contents:
        inline: '{ "name": "service-accounts" }'
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/lldap/authelia-user.json
      mode: 0400
      contents:
        inline: '{ "id": "authelia", "email": "authelia@{{ .DOMAIN.URL }}", "password": "{{ .AUTHELIA.LLDAP_PASSWORD }}", "groups": ["lldap_password_manager", "service-accounts"] }'
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/systemd/authelia.container
      mode: 0400
      contents:
        inline: |
          [Unit]
          Description=Authelia Quadlet
          After=lldap-bootstrap.container

          [Container]
          Image=ghcr.io/authelia/authelia:4.39.6
          ContainerName=authelia
          Network=tunnel.network
          ReadOnly=true
          DropCapability=ALL
          # su-exec: setgroups(0): Operation not permitted
          AddCapability=SETGID
          NoNewPrivileges=true

          Environment="TZ=Europe/Paris"

          Tmpfs=/app
          Volume=/home/bofzilla/.config/containers/authelia/configuration.yml:/config/configuration.yml:Z,ro
          Volume=/srv/bofzilla/containers/authelia:/data:Z,rw
          Mount=type=volume,source=CrowdsecLogs.volume,subpath=/authelia,destination=/var/log/authelia

          Notify=healthy
          HealthCmd=/app/healthcheck.sh
          HealthInterval=30s
          HealthTimeout=3s
          HealthRetries=5
          HealthStartPeriod=60s

          [Service]
          Restart=on-failure
          # Podman handles it via Healthcheck and Notify=healthy
          TimeoutStartSec=infinity

          [Install]
          WantedBy=default.target
      user:
        name: bofzilla
      group:
        name: bofzilla
    - path: /home/bofzilla/.config/containers/authelia/configuration.yml
      mode: 0400
      contents:
        inline: |
          theme: dark

          log:
            level: debug
            format: text
            file_path: /var/log/authelia/authelia.log
            keep_stdout: true

          # Is the authz mode for caddy
          server:
            endpoints:
              authz:
                forward-auth:
                  implementation: ForwardAuth

          access_control:
            default_policy: deny
            rules:
              - domain: {{ .LLDAP.SUBDOMAIN }}.{{ .DOMAIN.URL }}
                policy: two_factor
                subject:
                  - group:lldap_admin

          identity_validation:
            elevated_session:
              code_lifespan: '5 minutes'
              elevation_lifespan: '10 minutes'
              characters: 8
              require_second_factor: true
            reset_password:
              jwt_secret: {{ .AUTHELIA.JWT_SECRET_PWD_RESET }}
              jwt_algorithm: HS512

          storage:
            encryption_key: {{ .AUTHELIA.STORAGE_ENCRYPTION_KEY }}
            local:
              path: /data/db.sqlite3

          session:
            secret: {{ .AUTHELIA.JWT_SECRET }}
            name: authelia_session_{{ .DOMAIN.URL }}
            cookies:
              - domain: {{ .DOMAIN.URL }}
                authelia_url: https://{{ .AUTHELIA.SUBDOMAIN }}.{{ .DOMAIN.URL }}

          password_policy:
            standard:
              enabled: true
              min_length: 50
              require_uppercase: true
              require_lowercase: true
              require_number: true
              require_special: true
            # Doesn't restrict... <https://www.authelia.com/configuration/security/password-policy/#zxcvbn>
            # zxcvbn:
            #   enabled: true
            #   min_score: 4

          notifier:
            smtp:
              address: smtp://smtp.purelymail.com:587
              sender: {{ .AUTHELIA.SMTP_ADDRESS }}
              username: {{ .AUTHELIA.SMTP_ADDRESS }}
              password: {{ .AUTHELIA.SMTP_PASS }}
              subject: '{title}'
              startup_check_address: test@authelia.com

          telemetry:
            metrics:
              enabled: false

          #####################
          ## Auth strategies ##
          #####################
          # First factor
          authentication_backend:
            ldap:
              implementation: lldap
              address: ldap://lldap:3890
              base_dn: {{ $LLDAP_BASE_DN }}
              user: uid=authelia,OU=people,{{ $LLDAP_BASE_DN }}
              password: {{ .AUTHELIA.LLDAP_PASSWORD }}
              ## Login via username or email, but service-accounts can't login through authelia
                # login allowed by uid OR mail (default)
                # must be a person (default, lldap stores everybody in this)
                # must NOT be in service-accounts group
              users_filter: (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person)(!(memberOf=cn=service-accounts,ou=groups,{{ $LLDAP_BASE_DN }})))

          # 2nd factors
          totp:
            disable: false
            issuer: Authelia - {{ .DOMAIN.URL }}
            digits: 8
            secret_size: 64
            algorithm: sha512
            allowed_algorithms: [sha256, sha512]

          webauthn:
            disable: false
            display_name: Authelia - {{ .DOMAIN.URL }}
            attestation_conveyance_preference: none
            timeout: 60s
            selection_criteria:
              user_verification: preferred
      user:
        name: bofzilla
      group:
        name: bofzilla

systemd:
  units:
    # Enable systemd-sysext.service to merge the sysexts on boot
    - name: systemd-sysext.service
      enabled: true

    # Enable firewall rules
    - name: nftables.service
      enabled: true

    # Remove docker starting at boot
    - name: docker.service
      mask: true
    - name: docker.socket
      mask: true

    # Enable the Linux Audit Daemon
    - name: auditd.service
      enabled: true

    # Disable system security services daemon (~only used in enterprise setting)
    - name: sssd.socket
      mask: true
    - name: sssd.service
      mask: true

    # SSH port redirection
    - name: sshd.socket
      dropins:
        - name: 99-sshd-port.conf
          contents: |
            [Socket]
            ListenStream={{ .SSH_PORT }}

    # Replace chronyd with systemd-timesyncd to avoid open UDP port 323
    - name: chronyd.service
      mask: true
    - name: systemd-timesyncd.service
      enabled: true # outbound-only time sync (no open ports)

    - name: crowdsec-firewall-bouncer.service
      enabled: true
      contents: |
        [Unit]
        Description=CrowdSec Firewall Bouncer (nftables)

        [Service]
        TimeoutStartSec=180
        Type=simple
        ExecStartPre=/usr/bin/tar --no-same-owner -xvzf /var/opt/crowdsec-firewall-bouncer.tgz --wildcards --strip-components=1 -C /var/opt/ '*/crowdsec-firewall-bouncer'
        ExecStartPre=/usr/bin/chcon -t bin_t /var/opt/crowdsec-firewall-bouncer
        ExecStartPre=/bin/bash -c "until [ -f /run/user/$(id -u bofzilla)/crowdsec-ready ]; do sleep 1; done"
        ExecStart=/var/opt/crowdsec-firewall-bouncer -v -c /var/opt/crowdsec-firewall-bouncer.yaml
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

    # Manage SELinux, waiting for a better solution
    - name: set-se-state.service
      enabled: true
      contents: |
        [Unit]
        Description=Configure SELinux
        After=systemd-sysext.service
        Wants=systemd-sysext.service
        Requires=systemd-sysext.service
        Before=sshd.service

        [Service]
        Type=oneshot 
        RemainAfterExit=yes
        ## Allows sshd to bind to custom port
        ExecStart=/usr/bin/semanage port -a -t ssh_port_t -p tcp {{ .SSH_PORT }}
        ExecStart=/bin/bash -c '/usr/bin/checkmodule -M -m -o /tmp/podman_mount_journald.mod /etc/selinux/custom-policies/podman-mount-journald.te && /usr/bin/semodule_package -o /tmp/podman_mount_journald.pp -m /tmp/podman_mount_journald.mod && /usr/bin/semodule -i /tmp/podman_mount_journald.pp && /usr/bin/rm -f /tmp/podman_mount_journald.*'

        [Install]
        WantedBy=multi-user.target

    ## {{ if .BACKUP.ENABLED }}
    #### Backup
    - name: set-rsync-se-state.service
      enabled: true
      contents: |
        [Unit]
        Description=Configure SELinux
        After=set-se-state.service

        [Service]
        Type=oneshot 
        RemainAfterExit=yes
        ExecStart=/usr/bin/setsebool rsync_full_access on
        ExecStart=/bin/bash -c '/usr/bin/checkmodule -M -m -o /tmp/rsync_cifs.mod /etc/selinux/custom-policies/rsync-cifs.te && /usr/bin/semodule_package -o /tmp/rsync_cifs.pp -m /tmp/rsync_cifs.mod && /usr/bin/semodule -i /tmp/rsync_cifs.pp && /usr/bin/rm -f /tmp/rsync_cifs.*'

        [Install]
        WantedBy=multi-user.target
    - name: sync-backup.service
      enabled: true
      contents: |
        [Unit]
        Description=Sync paths to mounted Hetzner Storage Box
        After=sync-restore.service

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/rsync --verbose \
          --archive --recursive \
          --delete \
          --fake-super \
          --log-file=/var/log/sync-to-storagebox.log \
          --files-from=/etc/sync/paths.txt \
          --relative / /var/mnt/storagebox

        [Install]
        WantedBy=multi-user.target

    - name: sync-backup.timer
      enabled: true
      contents: |
        [Unit]
        Description=Periodic sync to mounted Hetzner Storage Box

        [Timer]
        OnUnitActiveSec=3min
        Persistent=true

        [Install]
        WantedBy=timers.target
    - name: sync-restore.service
      enabled: true
      contents: |
        [Unit]
        Description=Restore system from CIFS backup on boot
        After=var-mnt-storagebox.mount

        [Service]
        Type=oneshot
        ExecStart=/etc/sync/restore.sh "/etc/sync/paths.txt" "/var/mnt/storagebox"
        ExecStartPost=/usr/bin/touch /run/restore-complete

        [Install]
        WantedBy=multi-user.target
    - name: var-mnt-storagebox.mount
      enabled: true
      contents: |
        [Unit]
        Description=Mount CIFS Hetzner Storagebox
        After=network-online.target set-rsync-se-state.service
        Requires=network-online.target set-rsync-se-state.service

        [Mount]
        # https://docs.hetzner.com/storage/storage-box/access/access-samba-cifs/#sambacifs
        What=//{{ .BACKUP.STORAGEBOX_USER }}.your-storagebox.de/{{ .BACKUP.STORAGEBOX_USER }}
        Where=/var/mnt/storagebox
        Type=cifs
        Options=credentials=/etc/cifs-credentials,_netdev,vers=3.0

        [Install]
        WantedBy=multi-user.target
    ## {{ else }}
    - name: dummy-restore.service
      enabled: true
      contents: |
        [Unit]
        Description=Dummy fake restore service

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/touch /run/restore-complete

        [Install]
        WantedBy=multi-user.target
    ## {{ end }} ## .BACKUP.ENABLED

passwd:
  users:
    - name: bofzilla
      groups: [wheel]
      password_hash: $y$j9T$uLiWqr0dmF4Op1GerGVIb.$w0t1TBTgyIbGU5tIT5z04Sl08O9Tx4MFc7GCh/s3KVC
      ssh_authorized_keys_local:
        - .ssh/bofzilla.pub

    # Disable default "core" user
    - name: core
      shell: /sbin/nologin
