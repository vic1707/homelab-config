###### Debug SELinux

# sudo ausearch -m avc -ts recent
### Print allow policy
# sudo ausearch -m avc -ts recent | grep <thing> | audit2allow -m TMP
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/Relativ-IT/Butane-Schemas/Release/Butane-Schema.json
variant: fcos
version: 1.7.0-experimental

ignition:
  config:
    merge:
      - local_butane: backup/backup.bu.yml
      - local_butane: users/vic1707.bu.yml
      - local_butane: users/core.bu.yml
      - local_butane: services/systemd.bu.yml

storage:
  links:
    # Timezone config
    - path: /etc/localtime
      target: ../usr/share/zoneinfo/Europe/Paris

  files:
    # SSH daemon hardening
    - path: /etc/ssh/sshd_config.d/99-hardening.conf
      mode: 0400
      contents:
        inline: |
          Port {{ .SSH_PORT }}
          PermitRootLogin no              # Disallow root SSH logins
          PasswordAuthentication no       # Force key-based auth
          AddressFamily inet              # Binds SSH to IPv4 only
          MaxAuthTries 6                  # Includes ssh-key tries
          MaxSessions 2                   # Max connections per IP
          MaxStartups 2                   # Maximum incoming connection attempts
          LogLevel VERBOSE

    # Require password for sudo (wheel and sudo groups)
    - path: /etc/sudoers.d/99-wheel-sudo-require-password
      mode: 0400
      contents:
        inline: |
          %wheel ALL=(ALL) ALL
          %sudo ALL=(ALL) ALL

    # Disable unnecessary DNS listeners (like LLMNR, mDNS, and stub listener)
    - path: /etc/systemd/resolved.conf.d/99-custom-dns-disable-llmnr-mdns-stublistener.conf
      mode: 0444 # Cannot change
      contents:
        inline: |
          [Resolve]
          # Cloudflare
          DNS=1.1.1.1 1.0.0.1
          # Quad9 & Google DNS
          FallbackDNS=9.9.9.9 8.8.8.8
          # Disables Link-Local Multicast Name Resolution
          LLMNR=no
          # Disables mDNS
          MulticastDNS=no
          # Prevents systemd-resolved from opening port 53 on localhost
          DNSStubListener=no

    # Close all ports (firewall rules)
    - path: /etc/sysconfig/nftables.conf
      overwrite: true
      mode: 0400
      contents:
        inline: |
          table inet filter {
            chain input {
              ## hook into the kernel's INPUT path to filter packets
              type filter hook input priority 0;

              ## DROP everything by default
              policy drop;

              ## Allow loopback (localhost) traffic
              # @typos-ignore
              iif lo accept;

              ## Allow established or related connections
              ct state established, related accept;

              ## Allow SSH
              tcp dport {{ .SSH_PORT }} accept;
              ## Caddy ports
              tcp dport 443 accept;
            }

            chain forward {
              ## hook into the kernel's FORWARD path to filter packets
              type filter hook forward priority 0;

              ## DROP everything by default
              policy drop;
            }

            chain output {
              ## hook into the kernel's OUTPUT path to filter packets
              type filter hook output priority 0;

              ## ALLOW everything by default
              policy accept;
            }
          }

    # Audit rules
    - path: /etc/audit/rules.d/99-custom.rules
      mode: 0400
      contents:
        inline: |
          # Watch /etc/passwd for write (w) and attribute (a) changes.
          -w /etc/passwd -p wa -k passwd_changes

          # Watch /etc/shadow for write (w) and attribute (a) changes.
          -w /etc/shadow -p wa -k shadow_changes

          # Watch SSH daemon config for changes.
          -w /etc/ssh/sshd_config -p wa -k ssh_config_changes

    # Sysctl hardening
    - path: /etc/sysctl.d/99-hardening.conf
      mode: 0400
      contents:
        inline: |
          # Enable reverse path filtering (prevents IP spoofing).
          net.ipv4.conf.all.rp_filter = 1

          # Restrict access to kernel pointers in /proc (helps mitigate kernel info leaks).
          kernel.kptr_restrict = 2

    # Allow the unprivileged user to bind to port 443 and above
    - path: /etc/sysctl.d/90-unprivileged-ports.conf
      contents:
        inline: |
          net.ipv4.ip_unprivileged_port_start = 443

    ######################
    ## Containers stuff ##
    ######################
    - path: /home/vic1707/.config/containers/systemd/tunnel.network
      mode: 0400
      contents:
        inline: |
          [Network]
          NetworkName=tunnel
          Driver=bridge
          IPv6=false
          Subnet=10.89.0.0/26
          Gateway=10.89.0.1
          Options=isolate=true
      user:
        name: vic1707
      group:
        name: vic1707

    ## Caddy
    - path: /home/vic1707/.config/containers/caddy/Caddyfile
      mode: 0400
      contents:
        local: ./Caddyfile
      user:
        name: vic1707
      group:
        name: vic1707
    - path: /home/vic1707/.config/containers/systemd/caddy.container
      mode: 0400
      contents:
        inline: |
          [Unit]
          Description=Caddy Quadlet
          After=crowdsec.container

          [Container]
          Image=ghcr.io/vic1707/homelab/telstar-caddy:latest
          ContainerName=caddy
          Network=tunnel.network
          ReadOnly=true
          DropCapability=ALL
          AddCapability=NET_BIND_SERVICE
          NoNewPrivileges=true
          Environment="TZ=Europe/Paris"
          Environment="CLOUDFLARE_API_TOKEN={{ .CLOUDFLARE_API_TOKEN }}"
          Environment="CROWDSEC_CADDY_BOUNCER_API_KEY={{ .CROWDSEC_CADDY_BOUNCER_API_KEY }}"
          PublishPort=443:443
          Volume=/home/vic1707/.config/containers/caddy/Caddyfile:/etc/caddy/Caddyfile:Z,ro
          Volume=/srv/vic1707/containers/caddy:/data/caddy:Z,rw
          Mount=type=volume,source=CrowdsecLogs.volume,subpath=/caddy,destination=/var/log/caddy
          UserNS=keep-id
          # User=vic1707

          Notify=healthy
          HealthCmd=wget --spider --quiet --tries=1 --timeout=5 http://localhost:9999/health
          HealthInterval=30s
          HealthTimeout=5s
          HealthRetries=5
          HealthStartPeriod=30s

          [Service]
          Restart=always
          # Podman handles it via Healthcheck and Notify=healthy
          TimeoutStartSec=infinity
          ExecStartPre=/usr/bin/bash -c "until [ -f /run/restore-complete ]; do sleep 1; done"

          [Install]
          WantedBy=default.target
      user:
        name: vic1707
      group:
        name: vic1707
    - path: /home/vic1707/.config/containers/systemd/crowdsec.container
      mode: 0400
      contents:
        inline: |
          [Unit]
          Description=Crowdsec Quadlet

          [Container]
          Image=docker.io/crowdsecurity/crowdsec:v1.6.11-debian
          ContainerName=crowdsec
          Network=tunnel.network
          NoNewPrivileges=true
          DropCapability=ALL
          Tmpfs=/var/lib/crowdsec/data
          PublishPort=127.0.0.1:8080:8080
          Environment="TZ=Europe/Paris"
          Environment="BOUNCER_KEY_caddy={{ .CROWDSEC_CADDY_BOUNCER_API_KEY }}"
          Environment="BOUNCER_KEY_firewall={{ .CROWDSEC_FIREWALL_BOUNCER_API_KEY }}"
          Environment="ENROLL_KEY={{ .CROWDSEC_API_KEY }}"
          Environment="USE_WAL=true"
          Environment="ENROLL_INSTANCE_NAME=telstar"
          Environment="COLLECTIONS=crowdsecurity/linux crowdsecurity/sshd crowdsecurity/caddy crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules"
          Volume=/srv/vic1707/containers/crowdsec:/etc/crowdsec:Z,rw
          Volume=/home/vic1707/.config/containers/crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml:Z,rw
          Volume=CrowdsecLogs.volume:/var/log:ro
          Volume=/var/log/journal:/run/log/journal:ro

          Notify=healthy
          HealthCmd=cscli lapi status
          HealthInterval=30s
          HealthTimeout=5s
          HealthRetries=5
          HealthStartPeriod=180s

          [Service]
          Restart=always
          # Podman handles it via Healthcheck and Notify=healthy
          TimeoutStartSec=infinity
          ExecStartPre=/usr/bin/bash -c "until [ -f /run/restore-complete ]; do sleep 1; done"
          ExecStartPre=/usr/bin/bash -c "until [ -f /run/user/1001/crowdsec-volume-ready ]; do sleep 1; done"
          # needed by the bounder, I think
          ExecStartPost=/usr/bin/touch /run/user/1001/crowdsec-ready

          [Install]
          WantedBy=default.target
      user:
        name: vic1707
      group:
        name: vic1707
    - path: /home/vic1707/.config/containers/systemd/CrowdsecLogs.volume
      mode: 0400
      contents:
        inline: |
          [Volume]
          VolumeName=CrowdsecLogs

          [Service]
          ExecStartPost=/usr/bin/podman run --rm -v CrowdsecLogs:/mnt docker.io/library/alpine mkdir -p /mnt/caddy
          ExecStartPost=/usr/bin/touch /run/user/1001/crowdsec-volume-ready
      user:
        name: vic1707
      group:
        name: vic1707
    - path: /home/vic1707/.config/containers/crowdsec/acquis.yaml
      mode: 0400
      contents:
        local: ./acquis.yaml
      user:
        name: vic1707
      group:
        name: vic1707
