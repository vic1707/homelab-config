---
- name: Manage {{ domain }}
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    domain: bofzilla.dev
    cf_auth_token: "{{ lookup('community.general.passwordstore', 'domains/' + domain + '/api-key.cloudflare', subkey='key') }}"
    cf_account_name: "{{ domain.split('.')[0] }}"

    waf:
      block:
        - description: Known Bots
          expression: (cf.client.bot)

        - description: "[Path] Hidden Files"
          expression: (http.request.uri.path contains "/." and not http.request.uri.path contains "/.well-known/")

        - description: "[Path] Traversal (..)"
          expression: (http.request.uri.path contains "..")

        - description: Encoded Dot (%2e)
          expression: (http.request.uri.path contains "%2e")

        - description: "[Path] Double Slash"
          expression: (http.request.uri.path contains "//")

        - description: Identified Threatening Sources
          expression: (cf.threat_score gt 50)

        - description: Potential SQL Injection Attempts
          expression: >
            (http.request.uri.query contains "'")
            or (http.request.uri.query contains "--")
            or (http.request.uri.query contains "/*")
            or (http.request.uri.query contains "xp_")

        - description: Dangerous or Unused HTTP Methods
          expression: (http.request.method in {"TRACE" "CONNECT" "PRI" "TRACK" "DEBUG"})

        - description: "[Paths] Sensitive"
          expression: >
            (http.request.uri.path contains "/.git")
            or (http.request.uri.path contains "/wp-admin")
            or (http.request.uri.path contains "/phpmyadmin")

      challenge:
        - description: HTTP/1.0 (and is not Lynx browser)
          expression: (http.request.version eq "HTTP/1.0" and not http.user_agent contains "Lynx/")

        - description: Empty User-Agent
          expression: (http.user_agent eq "")

        - description: Requests with No Referrer and No User-Agent
          expression: (http.user_agent eq "" and http.referer eq "")

  vars_files:
    - dns-records/purelymail.ansible.yml
    - dns-records/homelab.ansible.yml

  tasks:
    - name: Zone SSL security
      ansible.builtin.include_role:
        name: linuxhq.cloudflare.ssl
      vars:
        cf_ssl:
          - zone_id: "{{ _cf_zone_id[domain] }}"
            mode: strict # TODO: origin_pull? currently returns a 400
            always_use_https: true
            min_tls_version: 1.3
            automatic_https_rewrites: true
            opportunistic_encryption: true

    - name: Zone security
      ansible.builtin.include_role:
        name: linuxhq.cloudflare.security
      vars:
        cf_security:
          - zone_id: "{{ _cf_zone_id[domain] }}"
            security_level: high
            challenge_ttl: 900 # 15min
            browser_check: true

    - name: Zone scrape shield
      ansible.builtin.include_role:
        name: linuxhq.cloudflare.scrape_shield
      vars:
        cf_scrape_shield:
          - zone_id: "{{ _cf_zone_id[domain] }}"
            email_obfuscation: true
            server_side_exclude: true
            hotlink_protection: true

    - name: Zone WAF
      ansible.builtin.include_role:
        name: linuxhq.cloudflare.ruleset_entrypoint
      vars:
        cf_zone_id: "{{ _cf_zone_id[domain] }}"
        cf_ruleset_rules: >-
          {{
            waf
            | moreati.jq.jq('to_entries | map({ action: .key, enabled: true, expression: (.value | map(.expression) | join(" or ")) })')
          }}

    - name: DNS records
      ansible.builtin.include_role:
        name: linuxhq.cloudflare.dns
      vars:
        cf_dns:
          - zone: "{{ domain }}"
            records: >-
              {{
                protonmail_dns_records_map
                | combine(brevo_dns_records_map, list_merge='append')
                | combine(homelab_dns_records_map, list_merge='append')
                | moreati.jq.jq('to_entries | map(.value[] + { type: .key })')
              }}
